---
- hosts: localhost
  gather_facts: yes
  become: no
  connection: local
  tasks:
    - name: Ensure homebrew-cask-upgrade is installed
      homebrew_tap:
        name: buo/cask-upgrade
    - name: include variable file
      include_vars: mac_vars.yml
    - name: Update homebrew and upgrade all packages
      homebrew:
        update_homebrew: yes
        upgrade_all: yes
    - name: Ensure git global setting
      git_config:
        scope: global
        name: "{{ item.name }}"
        value: "{{ item.value }}"
      with_items: "{{ git_global_config }}"
    - name: Ensure brew tap is installed
      homebrew_tap:
        name: "{{ item.name }}"
      with_items: "{{ homebrew_taps }}"
    - name: Ensure Homebrew packages is installed
      homebrew:
        name: "{{ item.name }}"
        state: "{{ item.state|default('latest') }}"
      with_items: "{{ homebrew_packages }}"
    - block:
        - name: find terraform-provider-sakuracloud symlinks
          find:
            paths: ~/.terraform.d/plugins
            patterns: terraform-provider-sakuracloud*
            file_type: link
          register: find_symlink_result
        - name: remove terraform-provider-sakuracloud version old symlinks
          file:
            path: "{{ item.path }}"
            state: absent
          with_items: "{{ find_symlink_result.files }}"
        - name: find terraform-provider-sakuracloud binary file
          find:
            paths: /usr/local/opt/terraform-provider-sakuracloud/bin
            file_type: file
          register: find_binary_result
        - name: create plugin symlink
          file:
            src: "{{ find_binary_result.files[0].path }}"
            dest: ~/.terraform.d/plugins/{{ find_binary_result.files[0].path|basename }}
            state: link
      when: "'terraform-provider-sakuracloud' in homebrew_packages|map(attribute='name')|list"
    - name: cleanup brew packages
      command: brew cleanup
    - name: Ensure Homebrew cask packages is installed
      homebrew_cask:
        name: "{{ item.name }}"
        state: "{{ item.state|default('present') }}"
      with_items: "{{ homebrew_cask_packages }}"
    - name: update brew cask packages
      command: brew cu --all --yes --quiet --cleanup
    - name: Ensure .bashrc in BREW_PREFIX variable
      lineinfile:
        dest: ~/.bashrc
        line: 'BREW_PREFIX=$(brew --prefix)'
    - name: Ensure load secret environment variable setting
      blockinfile:
        marker: "# {mark} secret environment variables ANSIBLE MANAGED BLOCK"
        dest: ~/.bashrc
        block: |
          if [ -f ~/.secret ]; then
              source ~/.secret
          fi
    - name: include secret environment variables file
      include_vars: secret_env.yml
    - name: add secret environment variable
      lineinfile:
        path: ~/.secret
        regexp: "^export {{ item.key }}=.*"
        line: 'export {{ item.key }}="{{ item.value }}"'
        create: yes
      with_dict: "{{ secret_env|default({}) }}"
    - name: Ensure .bashrc in load bash-completion
      lineinfile:
        dest: ~/.bashrc
        line: '[ -f "${BREW_PREFIX}"/etc/bash_completion ] && source /usr/local/etc/bash_completion'
      when: "'bash-completion' in homebrew_packages|map(attribute='name')|list"
    - name: Ensure load bash completion file
      lineinfile:
        dest: ~/.bashrc
        line: '[ -f "${BREW_PREFIX}"/etc/bash_completion.d/{{ item.bash_completion }} ] && source "${BREW_PREFIX}"/etc/bash_completion.d/{{ item.bash_completion }}'
      with_items: "{{ homebrew_packages|selectattr('bash_completion', 'defined')|selectattr('state', 'undefined')|list }}"
    - name: Ensure rcfile setting
      blockinfile:
        create: true
        marker: "# {mark} {{ item.name }} ANSIBLE MANAGED BLOCK"
        dest: "{{ item.rcfile.path|default('~/.bashrc') }}"
        block: "{{ item.rcfile.content }}"
      with_items: "{{ homebrew_packages|selectattr('rcfile', 'defined')|selectattr('state', 'undefined')|list }}"
    - name: Ensure brew package directory
      file:
        path: "{{ item.directory }}"
        state: directory
      with_items: "{{ homebrew_packages|selectattr('directory', 'defined')|selectattr('state', 'undefined')|list }}"
    - name: Ensure brew package symlink
      file:
        src: "{{ item.symlink.src }}"
        path: "{{ item.symlink.dest }}"
        state: link
      with_items: "{{ homebrew_packages|selectattr('symlink', 'defined')|selectattr('state', 'undefined')|list }}"
    - name: Ensure .bashrc command alias
      lineinfile:
        dest: ~/.bashrc
        line: 'alias {{ item.name }}="{{ item.command }}"'
      with_items: "{{ aliases }}"
    # pip
    - name: orverwrite ansible python path
      set_fact:
        ansible_python_interpreter: "{{ ansible_user_dir }}/.pyenv/shims/python"
      when: "'pyenv' in homebrew_packages|map(attribute='name')|list"
    - name: Ensure pip packages
      pip:
        name: "{{ item.name }}"
        state: "{{ item.state|default('latest') }}"
        version: "{{ item.version|default(omit) }}"
        extra_args: "{{ item.args|default(omit) }}"
      with_items: "{{ pip_packages }}"
      register: result
    - name: execute pyenv rehash
      command: pyenv rehash
      when: "'pyenv' in homebrew_packages|map(attribute='name')|list and result|changed"
    # gem
    - name: Ensure gem packages
      gem:
        name: "{{ item.name }}"
        user_install: no
        state: "{{ item.state|default('latest') }}"
      with_items: "{{ gem_packages }}"
      register: result
    - name: cleanup gem packages
      command: gem cleanup
      when: result|changed
    # npm
    - name: Ensure npm packages
      npm:
        name: "{{ item.name }}"
        global: yes
        state: "{{ item.state|default('latest') }}"
      with_items: "{{ npm_packages }}"
    - block:
      - name: dump brew install packages
        command: brew-file init
      - name: push Brewfile
        command: brew-file push
      when: "'brew-file' in homebrew_packages|map(attribute='name')|list"
    - name: dump atom install packages
      shell: apm list --installed --bare>./atom-packages.txt
      when: "'atom' in homebrew_cask_packages|map(attribute='name')|list"
  post_tasks:
    - name: install rarukas
      get_url:
        url: https://github.com/rarukas/rarukas/releases/download/0.0.2/rarukas_darwin-amd64
        dest: /usr/local/bin/rarukas
        mode: 0755
